swagger: '2.0'
info:
  title: Raiffeisenbank e-commerce API
  contact: {
    email: ecom_support@raiffeisen.ru,
    name: Support e-mail
  }
  x-logo:
    url: images/raifflogo.png
    backgroundColor: '#FFFFFF'
    altText: Raiff logo
  description: |
    # Подключение к эквайрингу
    
    По всем вопросам работы с API необходимо обращаться в Службу Поддержки Raiffeisenbank:
    - email: <a href="mailto:ecom_support@raiffeisen.ru">ecom_support@raiffeisen.ru</a>
    
    ## Общая схема работы
    Пользователь совершает следующие действия в процессе платежа:
    * Выбирает товары/услуги в корзину магазина и нажимает кнопку “Оплатить”.
    * Партнер открывает платежную форму.
    * Клиент вводит реквизиты на платежной форме и подтверждает платеж.
    
    Схема выполнения платежа представлена ниже:
    
    <a target='_blank'><img src='images/E-commerce Raiffeisenbank scheme.png'></a>
    
    ## Подготовительные мероприятия
    Чтобы принимать платежи, нужно: 
    * подать заявку на подключение
    * заключить договор с Райффайзенбанком
    * выбрать способ интеграции и реализовать его
    * успешно провести тестовые платежи.
    
    ## Способы интеграции платежной страницы
    Для интеграции платежной страницы можно использовать:
    * готовую библиотеку, позволяющую открыть popup для ввода данных платежа и передать сложную структуру данных.
    * перенаправление клиента на платежную страницу Райффайзенбанка

    # Описание API 
    Взаимодействие осуществляется по протоколу HTTP с использованием методов GET/POST (в описании каждого запроса явно указан требуемый метод и адрес).

    POST-запросы используют JSON-аргументы, GET-запросы работают со строками запросов.

    API всегда возвращает ответ в формате JSON, независимо от типа запроса.

    Ответ любого метода содержит код сообщения (code). Если в процессе обработки любого запроса произойдет логическая ошибка, API вернет дополнительно описание ошибки (message).   
    ##  Авторизация
    
    Для авторизация запросов необходимы:
    * publicId - идентификатор,который используется для открытия платежной формы и не является конфиденциальным
    * secretKey - секретный ключ, который используется для межсервисного взаимодействия. 
    
    ВАЖНО: Секретный ключ необходимо хранить в защищенном месте, нельзя публиковать на сторонних ресурсах или передавать третьим лицам.
    
    Межсервисные запросы авторизуются посредством секретного ключа API (SECRET_KEY). Параметр авторизации указывается в заголовке Authorization, значение которого формируется как "Bearer SECRET_KEY".
    
    Для генерации секретного ключа необходимо обратиться по адресу: ecom_support@raiffeisen.ru

    ## Параметры ошибок
    Ответ любого метода содержит код сообщения (code). Если в процессе обработки любого
    запроса произойдет логическая ошибка, API вернет дополнительно описание ошибки
    (message).

    HTTP-код | code | message | Комментарий
    --------|------------------|-----------------------------------|-----------------------------
    200 | SUCCESS | Запрос обработан успешно | Успешное выполнение запроса без логических и системных сбоев.
    200 | ERROR.Код_ошибки | Текстовое сообщение о сути ошибки | Логическая ошибка при выполнении запроса.
    500 | ERROR.INTERNAL | Ошибка | Системная ошибка при выполнении запроса.

servers:
- url: https://e-commerce.raiffeisen.ru
  description: Production API
- url: https://test.ecom.raiffeisen.ru
  description: Sandbox API
tags:
  - name: pay-controller
    x-displayName: 'Доступные методы'
    description: |
      Для реализации взаимодействия с партнёром Райффайзенбанк предоставляет API для открытия платежной формы с ипользованием HTTP запросов
      
  - name: Json-file
    x-displayName: 'Использование js-библиотеки'
    description: |
      В случае использования js-библиотеки магазину необходимо выполнить следующие шаги:
      1) Скачать библиотеку https://github.com/Raiffeisen-DGTL/ecom-payment-sdk
    
      2) Прописать скрипт на сайте магазина, пример: 
    
      <code>`<script src="https://e-commerce.raiffeisen.ru/pay/sdk/payment.styled.min.js"> </script>`</code> 
    
      3) Дальнейшее использование JS-библиотеки описано в файле Readme.md в репозитории https://github.com/Raiffeisen-DGTL/ecom-payment-sdk
      
      Ниже указан пример запроса на оплату:
      
      <SchemaDefinition schemaRef="#/components/schemas/Payment" />
  
  - name: Callback
    x-displayName: 'Уведомление о платеже'
    description: |
      Для информирования ТСП о проведенных платежах могут использоваться HTTP-уведомления на адрес, указанный в его настройках.
    
      Для партнёра уведомление представляет собой входящий POST-запрос, который использует JSON-структуру.
    
      Уведомление считается принятым, если получатель ответил на запрос кодом HTTP 200.
    
      Ответы с любыми другими HTTP-кодами будут считаться невалидными. Повторные попытки отправки будут проводиться в течение суток с нарастающим интервалом.
    
      Для проверки подлинности уведомления к данным добавляется подпись в заголовке  x-api-signature-sha256, полученная на основе общего секретного ключа и контрольной строки (amount|MerchantId|order|paymentStatus|transactionDate) с помощью HMAC-SHA-256.   
    
paths:
  /pay:
    post:
      tags:
      - pay-controller
      summary: Открытие платежной формы с ипользованием HTTP запроса
      operationId: registerUsingPOST_1
      consumes:
      - application/json;charset=UTF-8
      produces:
      - application/json;charset=UTF-8
      parameters:
      - in: body
        name: payment
        description: payment
        required: true
        schema:
          "$ref": "#/definitions/PaymentOptional"
      responses:
        200:
          description: Ответ с успешным результатом.
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false       
      
  <URL обработчика уведомлений на стороне партнёра>:
    post:
      tags:
      - Callback
      summary: Уведомление о статусе платежа
      operationId: sendCallback
      consumes:
      - application/json;charset=UTF-8
      parameters:
      - name: Callback
        in: body
        description: Callback
        required: true
        schema:
          "$ref": "#/definitions/Callback"
      responses:
        200:
          description: Ответ с успешным результатом.
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false 
      
definitions:
  PaymentOptional:
    type: object
    required:
    - publicId
    - amount
    properties:
      publicId:
        type: string
        description: Идентификатор магазина
        maxLength: 12
        example: 1680000000
      amount:
        type: BigDecimal
        description: Сумма платежа в рублях
        example: 1000.50
    title: Paymeny Optional
  Payment:
    type: object
    required:
    - publicId
    - amount
    properties:
      publicId:
        type: string
        description: Идентификатор магазина
        maxLength: 12
        example: 1680000000
      orderId:
        type: string
        description: Идентификатор заказа в магазине
        maxLength: 40
        example: orderTest
      amount:
        type: BigDecimal
        description: Сумма платежа в рублях
        example: 1000.50
      comment:
        type: string
        description: Описание платежа
        maxLength: 255
        example: Покупка шоколадного торта
      successUrl:
        type: string
        description: URL ресурса, куда будет перенаправлен клиент в случае успешного платежа
        maxLength: 40
        example: https://www.uniconf.ru/factories/krasny-octyabr/
      failUrl:
        type: string
        description: URL ресурса, куда будет перенаправлен клиент в случае неуспешного платежа
        example: https://www.baduniconf.ru/factories/krasny-octyabr/
      extra:
        type: string
        description: Структура с дополнительными параметрами магазина
        maxLength: 999
        example: '{ "additionalInfo": "Sweet Cake" }'
    title: TransactionID
  Callback:
    type: object
    required:
    - event
    properties:
      event:
        type: string
        description: Тип сообщения
        enum:
          - payment
        example: payment
      transaction:
        type: object
        required:
        - transactionId
        - orderId
        - amount
        properties:
          transactionId:
            type: long
            description: Идентификатор операции в Райффайзенбанке
            example: 120059
          orderId:
            type: string
            description: Идентификатор заказа в магазине
            maxLength: 40
            example: testOrder
          amount:
            type: BigDecimal
            description: Сумма в рублях
            example: 12500.50
          comment:
            type: string
            description: Описание платежа
            maxLength: 255
            example: Покупка шоколадного торта
          extra:
            type: string
            description: Структура с дополнительными параметрами магазина
            maxLength: 999
            example: '{ "additionalInfo": "Tasty Cake" }'
      status:
        type: object
        required:
        - value
        - date
        properties:
          value:
            type: string
            description: Статус 
            enum:
            - SUCCESS 
            - DECLINED 
            example: SUCCESS
          date:
            type: string
            format: date-time
            description: Дата и время проведения 
            example: '2019-07-11T17:45:13.109227+03:00'    
      acquiringData :
        type: object
        properties:
          rrn:
            type: string
            description: Номер для идентификации 
            maxLength: 12
            example: 935014591810
          authCode:
            type: string
            description: Код авторизации платежа, полученный от эмитента
            maxLength: 6
            example: 025984 
    title: Уведомление о платеже
  EmptyBody:
    type: object
